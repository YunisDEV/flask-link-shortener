{"version":3,"sources":["Redirecting.js","App.js","serviceWorker.js","index.js"],"names":["Redirecting","props","state","linkToRedirect","inner","postfix","this","match","params","fetch","res","console","log","status","setState","ok","json","data","className","url","href","React","Component","App","Fragment","exact","path","component","Main","link","createdLink","handleChange","bind","handleSubmit","e","target","name","value","preventDefault","method","headers","body","JSON","stringify","arr","window","location","split","onSubmit","onChange","placeholder","required","type","id","getHOST","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6TAIqBA,G,wDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAAEC,eAAgB,KAAMC,MAAQ,6BAF9B,E,2LAKTC,EAAYC,KAAKL,MAAMM,MAAMC,OAA7BH,Q,SACUI,MAAM,OAASJ,G,UAA3BK,E,OACJC,QAAQC,IAAIF,EAAIG,QACE,KAAdH,EAAIG,O,yCACGP,KAAKQ,SAAS,CAAEV,MAAO,kB,YACvBM,EAAIG,QAAU,K,0CACdP,KAAKQ,SAAS,CAAEV,MAAO,oB,YAEzBM,EAAIK,G,kCACQL,EAAIM,O,eAAjBC,E,yBACGX,KAAKQ,SAAS,CACjBV,MACI,yBAAKc,UAAU,WACX,wDAA6B,6BAAK,2BAAID,EAAKE,MAC3C,yBAAKD,UAAU,SAAQ,uBAAGE,KAAMH,EAAKE,IAAKD,UAAU,OAA7B,W,sIAQvC,OACI,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OAAM,6BAAMZ,KAAKJ,MAAME,a,GA9BbiB,IAAMC,YCChC,SAASC,IACtB,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,YAAYC,UAAW3B,O,IAQvC4B,E,kDACJ,WAAY3B,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAE2B,KAAM,GAAIC,YAAa,IACtC,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAJH,E,yDAMNE,GACX,GAAIA,EAAEC,OACJ7B,KAAKQ,SAAL,eAAiBoB,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,YACrC,KAAIH,EAAEE,OAAQF,EAAEG,MAGrB,OAAO,KAFP/B,KAAKQ,SAAL,eAAiBoB,EAAEE,KAAOF,EAAEG,W,4EAKbH,G,gFACjBA,EAAEI,iB,SACc7B,MAAM,UAAW,CAC/B8B,OAAQ,OACRC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAExC,eAAgBG,KAAKJ,MAAM2B,S,cANhDnB,E,gBAQaA,EAAIM,O,OAAjBC,E,OACJX,KAAKQ,SAAS,CAAEgB,YAAab,EAAKa,c,uIAGlC,IAAIc,EAAMC,OAAOC,SAAS1B,KAAK2B,MAAM,KACrC,OAAOH,EAAI,GAAK,KAAOA,EAAI,GAAK,M,+BAGhC,OACE,yBAAK1B,UAAU,aACb,yBAAKA,UAAU,OACb,0BAAMqB,OAAO,OAAOS,SAAU1C,KAAK2B,aAAcf,UAAU,QACzD,6DAGA,2BAAO+B,SAAU3C,KAAKyB,aAAcmB,YAAY,eAAeC,UAAQ,EAACC,KAAK,OAAOhB,KAAK,OAAOiB,GAAG,OAAOnC,UAAU,gBACpH,yBAAKA,UAAU,SACb,4BAAQkC,KAAK,UAAb,eAGA9C,KAAKJ,MAAM4B,YACT,6BACE,6CACA,uBAAGV,KAAMd,KAAKgD,UAAYhD,KAAKJ,MAAM4B,aAAcxB,KAAKgD,UAAYhD,KAAKJ,MAAM4B,cAGjF,Y,GApDGT,IAAMC,WCPLiC,QACW,cAA7BV,OAAOC,SAASU,UAEe,UAA7BX,OAAOC,SAASU,UAEhBX,OAAOC,SAASU,SAASjD,MACvB,2DCbNkD,IAASC,OACP,kBAAC,EAAD,MAEAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMC,c","file":"static/js/main.515377ad.chunk.js","sourcesContent":["import React from 'react'\nimport './App.scss'\nimport './Redirecting.scss'\n\nexport default class Redirecting extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { linkToRedirect: null, inner: (<p></p>) }\n    }\n    async componentDidMount() {\n        let { postfix } = this.props.match.params\n        var res = await fetch('/ls/' + postfix)\n        console.log(res.status)\n        if (res.status == 404) {\n            return this.setState({ inner: 'INVALID LINK' })\n        } else if (res.status >= 500) {\n            return this.setState({ inner: 'SERVER PROBLEM' })\n        }\n        else if (res.ok) {\n            var data = await res.json()\n            return this.setState({\n                inner: (\n                    <div className=\"success\">\n                        <p>Link wants to redirect you<br/><b>{data.url}</b></p>\n                        <div className=\"btnBx\"><a href={data.url} className=\"btn\">GO</a></div>\n                    </div>\n                )\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"container\" >\n                <div className=\"box\"><div>{this.state.inner}</div></div>\n            </div>\n        )\n    }\n\n}\n","import React from 'react';\nimport './App.scss'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Redirecting from './Redirecting'\n\nexport default function App() {\n  return (\n    <React.Fragment>\n      <Router >\n        <Switch>\n          <Route exact path=\"/\" component={Main} />\n          <Route path=\"/:postfix\" component={Redirecting} />\n        </Switch>\n      </Router>\n    </React.Fragment>\n  )\n}\n\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { link: '', createdLink: '' }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n  handleChange(e) {\n    if (e.target) {\n      this.setState({ [e.target.name]: e.target.value });\n    } else if (e.name && e.value) {\n      this.setState({ [e.name]: e.value });\n    } else {\n      return null;\n    }\n  }\n  async handleSubmit(e) {\n    e.preventDefault()\n    var res = await fetch('/create', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ linkToRedirect: this.state.link })\n    })\n    var data = await res.json()\n    this.setState({ createdLink: data.createdLink })\n  }\n  getHOST() {\n    var arr = window.location.href.split('/')\n    return arr[0] + \"//\" + arr[2] + '/'\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"box\">\n          <form method=\"POST\" onSubmit={this.handleSubmit} className=\"form\">\n            <h2>\n              Enter link you want to short:\n            </h2>\n            <input onChange={this.handleChange} placeholder=\"Link here...\" required type=\"text\" name=\"link\" id=\"link\" className=\"input__link\" />\n            <div className=\"btnBx\">\n              <button type=\"submit\">Short Link</button>\n            </div>\n            {\n              this.state.createdLink ?\n                <div>\n                  <p>Link is ready:</p>\n                  <a href={this.getHOST() + this.state.createdLink}>{this.getHOST() + this.state.createdLink}</a>\n                </div>\n                :\n                null\n            }\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />\n  ,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}